// @flow
import React from 'react';
import {
  Button,
  Container,
  NextButton,
  ButtonsList,
  PrevButton,
} from './styled';

type PaginateProps = {
  data: Array<mixed>,
  pageSize: number,
  limit: number,
  Component: React.Node,
}

class Paginate extends React.Component<PaginateProps> {
  constructor() {
    super();

    this.state = {
      paginate: [],
      active: 0,
      dataPaginate: [],
    };
  }

  componentDidMount() {
    this.setPaginate();
  }

  setPaginate(): void {
    const { data, pageSize, limit } = this.props;
    const { active } = this.state;
    if (Array.isArray(data)) {
      let size = pageSize;
      if (pageSize > data.length) {
        size = data.length;
      }
      if (pageSize < 0) {
        size = 1;
        console.error('pageSize cannot be less than 0');
      }
      this.setState({
        paginate: data.slice(0, size).map((item, i) => ({
          ...item,
          idxPaginate: i,
        })),
        dataPaginate: data.slice(active, active + limit).map((item, i) => ({
          ...item,
          idxPaginate: i,
        })),
      });
    } else {
      throw new Error('"data" must be an array!');
    }
  }

  togglePaginate = (idx) => {
    const { data, limit } = this.props;
    this.setState({
      active: idx,
      dataPaginate: data.slice(idx, idx + limit).map((item, i) => ({
        ...item,
        idxPaginate: i,
      })),
    });
  }

  render() {
    const { paginate, active, dataPaginate } = this.state;
    const { Component, data } = this.props;

    return (
      <Container>
        <ButtonsList>
          {
            active > 0 && (
              <PrevButton
                onClick={() => this.togglePaginate(active - 1)}
              >
                Prev
              </PrevButton>
            )
          }
          {
            paginate.map(item => (
              <Button
                first={item.idxPaginate === 0 && active === 0}
                last={item.idxPaginate === active && active + 1 === data.length}
                type="button"
                active={active === item.idxPaginate}
                key={item.idxPaginate}
                onClick={() => this.togglePaginate(item.idxPaginate)}
              >
                { item.idxPaginate + 1 }
              </Button>
            ))
          }
          {
            active + 1 < data.length && (
              <NextButton
                onClick={() => this.togglePaginate(active + 1)}
              >
                Next
              </NextButton>
            )
          }
        </ButtonsList>
        {
          dataPaginate.map(item => (
            <Component key={item.idxPaginate} {...item} />
          ))
        }
      </Container>
    );
  }
}

export { Paginate };
