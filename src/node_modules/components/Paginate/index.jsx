// @flow
import React from 'react';
import {
  Button,
  Container,
  NextButton,
  ButtonsList,
  PrevButton,
} from './styled';

type PaginateProps = {
  data: Array<mixed>,
  limit: number,
  component: React.Node,
}

const chunkArray = (array, chunkSize) => {
  const result = [];
  const maxLength = array.length;

  for (let item = 0; item < maxLength; item += chunkSize) {
    result.push(array.slice(item, item + chunkSize))
  }

  return result;
};

class Paginate extends React.Component<PaginateProps> {
  constructor() {
    super();

    this.state = {
      paginate: [],
      active: 0,
      dataPaginate: [],
    };
  }

  componentDidMount() {
    this.setPaginate();
  }

  setPaginate(): void {
    const { data, limit } = this.props;
    console.log(this.props)
    if (Array.isArray(data)) {
      let size = 0;
      let limitState = limit;
      if (limit === 0) {
        limitState = 1;
      }

      const filtArray = chunkArray(data.map((item, i) => {
        return {
          ...item,
          idxPaginate: i,
        };
      }), limitState);

      size = filtArray.length;

      this.setState({
        paginate: data.slice(0, size).map((item, i) => ({
          ...item,
          idxPaginate: i,
        })),
        dataPaginate: filtArray,
      });
    } else {
      throw new Error('"data" must be an array!');
    }
  }

  togglePaginate = (idx) => {
    this.setState({
      active: idx,
    });
  }

  render() {
    const { paginate, active, dataPaginate } = this.state;
    const { Component, data } = this.props;

    return (
      <Container>
        <ButtonsList>
          {
            active > 0 && (
              <PrevButton
                onClick={() => this.togglePaginate(active - 1)}
              >
                Prev
              </PrevButton>
            )
          }
          {
            paginate.map(item => (
              <Button
                first={item.idxPaginate === 0 && active === 0}
                last={item.idxPaginate === active && active + 1 === data.length}
                type="button"
                active={active === item.idxPaginate}
                key={item.idxPaginate}
                onClick={() => this.togglePaginate(item.idxPaginate)}
              >
                { item.idxPaginate + 1 }
              </Button>
            ))
          }
          {
            active + 1 < dataPaginate.length && (
              <NextButton
                onClick={() => this.togglePaginate(active + 1)}
              >
                Next
              </NextButton>
            )
          }
        </ButtonsList>
        {
          dataPaginate.length > 0 ? dataPaginate[active].map((item, i) => (
            <Component key={item.idxPaginate || i} {...item} />
          )) : null
        }
      </Container>
    );
  }
}

export { Paginate };
